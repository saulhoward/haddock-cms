#summary No global functions, please.

= Introduction =

PHP allows you to define functions pretty much wherever you like, e.g.

{{{
function connect_to_database()
{
    ...
}
}}}

This is horrible because you have no idea where in your program this function is defined. 

Worse yet, you might define the function in several .INC files and include different files conditionally. I've seen this in code that I'd been handed; it was very difficult to debug. You've really no idea how the program is going to behave.

To avoid this problem, in Haddock CMS projects, all functions are defined in classes, which are saved in files with the same name as the class.

e.g.

in a file called {{{FooBar_KishKashFactory.inc.php}}} in the 'Foo Bar' plug-in, you might have a class:

{{{
class 
    FooBar_KishKashFactory
{
    public static function 
        get_kish_kash()
    {
        return new FooBar_KishKash();
    }
}
}}}

{{{FooBar_KishKash}}} would be defined in a separate file call {{{FooBar_KishKash.inc.php}}} in the same plug-in.

{{{
$k = FooPlugIn_BarFactory::get_kish_kash();
}}}

Following this pattern is very important.

= But what about little helpers? =

This structure might seem a little over the top for little CLI scripts that need a little helper function that is only ever going to be used in that script.

However, this is not a problem as everything in a Haddock CMS project is a class, including CLI scripts.

See [NoINCFiles].